copy-on-write

此实验要求实现的是cow机制，在linux中fork()和exec()通常是绑定在一起使用的，但是如此的话fork复制的内存都是浪费的，极大的影响性能。所以cow机制在创建子进程时子进程不会复制数据，而会指向父进程的数据段，所以立即执行exec时不会浪费任何内存。如果不执行exec，当父子进程中有更改相应数据段的行为发生时，再为子进程相应的段分配物理空间。

首先vm.c新增数据段refcount[32768]用于记录每段数据的引用量，32768是根据(PHYSTOP-KERNBASE)/PGSIZE得出。修改kernel/riscv.h，新增PTE_C标志位，此标志位为地址的预留位。修改vm.c的uvmcopy()，当fork时不会赋值给新的数据段，而是指向父进程，同时消除PTE_W位，添加PTE_C位，表明有一个以上PTE指向此数据段。再修改mappages()、uvmunmap()绑定和解绑时改变refcount[]的引用数。最后修改kernel/trap.c的usertrap()，发生pagefault时检测是否有PTE_C位，如果有就为子进程分配新的物理页，在kernel/vm.c的copyout()也做同样的修改。
