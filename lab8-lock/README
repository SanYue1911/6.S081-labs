1、Memory allocator

因为lock会导致性能的下降，故本次实验要求为每个cpu皆拥有lock，降低粒度提升alloc性能。

首先修改kalloc.c/kmem结构,分配给每个cpu。再修改kalloc.c/kfree()释放相应cpu的freelist（freelist的初始化由kfree函数完成），修改kalloc.c/kalloc()如果当前cpu的freelist为空时，向其他cpu寻找空闲块。

2、Buffer cache

第二的实验依旧是提高性能，但是采用的方法是使用lock boucket和lru算法提高cache性能。

修改kernel/buf.h，新增tick，作为lru算法的时间标记，之后新增bio.c/bmem结构作为哈希表（链地址法），使用素数13个bucket。修改()binit和新增replacebuffer()为buf赋值，主要是tick变量。最重要的为bio.c/bget(),首先使用blockno%13判断在哪个数组并寻找是否已缓存，如果没有空缓存且没有命中，则通过tick判断找到最长时间未使用的块，使用replacebuffer()赋值并返回。
